// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types.proto

/*
	Package typespb is a generated protocol buffer package.

	It is generated from these files:
		types.proto

	It has these top-level messages:
		Hash
		Hash160
		Block
		BlockHeader
		Tx
*/
package typespb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/any"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Hash (32 bytes)
type Hash struct {
	S0 uint64 `protobuf:"fixed64,1,opt,name=s0,proto3" json:"s0,omitempty"`
	S1 uint64 `protobuf:"fixed64,2,opt,name=s1,proto3" json:"s1,omitempty"`
	S2 uint64 `protobuf:"fixed64,3,opt,name=s2,proto3" json:"s2,omitempty"`
	S3 uint64 `protobuf:"fixed64,4,opt,name=s3,proto3" json:"s3,omitempty"`
}

func (m *Hash) Reset()                    { *m = Hash{} }
func (m *Hash) String() string            { return proto.CompactTextString(m) }
func (*Hash) ProtoMessage()               {}
func (*Hash) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *Hash) GetS0() uint64 {
	if m != nil {
		return m.S0
	}
	return 0
}

func (m *Hash) GetS1() uint64 {
	if m != nil {
		return m.S1
	}
	return 0
}

func (m *Hash) GetS2() uint64 {
	if m != nil {
		return m.S2
	}
	return 0
}

func (m *Hash) GetS3() uint64 {
	if m != nil {
		return m.S3
	}
	return 0
}

type Hash160 struct {
	S0 uint32 `protobuf:"fixed32,1,opt,name=s0,proto3" json:"s0,omitempty"`
	S1 uint32 `protobuf:"fixed32,2,opt,name=s1,proto3" json:"s1,omitempty"`
	S2 uint32 `protobuf:"fixed32,3,opt,name=s2,proto3" json:"s2,omitempty"`
	S3 uint32 `protobuf:"fixed32,4,opt,name=s3,proto3" json:"s3,omitempty"`
	S4 uint32 `protobuf:"fixed32,5,opt,name=s4,proto3" json:"s4,omitempty"`
}

func (m *Hash160) Reset()                    { *m = Hash160{} }
func (m *Hash160) String() string            { return proto.CompactTextString(m) }
func (*Hash160) ProtoMessage()               {}
func (*Hash160) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *Hash160) GetS0() uint32 {
	if m != nil {
		return m.S0
	}
	return 0
}

func (m *Hash160) GetS1() uint32 {
	if m != nil {
		return m.S1
	}
	return 0
}

func (m *Hash160) GetS2() uint32 {
	if m != nil {
		return m.S2
	}
	return 0
}

func (m *Hash160) GetS3() uint32 {
	if m != nil {
		return m.S3
	}
	return 0
}

func (m *Hash160) GetS4() uint32 {
	if m != nil {
		return m.S4
	}
	return 0
}

// Block
type Block struct {
	BlockHeader  *BlockHeader `protobuf:"bytes,1,opt,name=block_header,json=blockHeader" json:"block_header,omitempty"`
	Transactions []*Tx        `protobuf:"bytes,2,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *Block) GetBlockHeader() *BlockHeader {
	if m != nil {
		return m.BlockHeader
	}
	return nil
}

func (m *Block) GetTransactions() []*Tx {
	if m != nil {
		return m.Transactions
	}
	return nil
}

// Block Header
type BlockHeader struct {
	ChainId         *Hash  `protobuf:"bytes,1,opt,name=chain_id,json=chainId" json:"chain_id,omitempty"`
	Version         uint64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Height          uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Timestamp       uint64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Previous        *Hash  `protobuf:"bytes,5,opt,name=previous" json:"previous,omitempty"`
	TransactionRoot *Hash  `protobuf:"bytes,6,opt,name=transaction_root,json=transactionRoot" json:"transaction_root,omitempty"`
	WitnessRoot     *Hash  `protobuf:"bytes,7,opt,name=witness_root,json=witnessRoot" json:"witness_root,omitempty"`
}

func (m *BlockHeader) Reset()                    { *m = BlockHeader{} }
func (m *BlockHeader) String() string            { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()               {}
func (*BlockHeader) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *BlockHeader) GetChainId() *Hash {
	if m != nil {
		return m.ChainId
	}
	return nil
}

func (m *BlockHeader) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BlockHeader) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockHeader) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BlockHeader) GetPrevious() *Hash {
	if m != nil {
		return m.Previous
	}
	return nil
}

func (m *BlockHeader) GetTransactionRoot() *Hash {
	if m != nil {
		return m.TransactionRoot
	}
	return nil
}

func (m *BlockHeader) GetWitnessRoot() *Hash {
	if m != nil {
		return m.WitnessRoot
	}
	return nil
}

// Transaction
type Tx struct {
	Version   uint64         `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Inputs    []*Tx_TxIn     `protobuf:"bytes,2,rep,name=inputs" json:"inputs,omitempty"`
	Outputs   []*Tx_TxOut    `protobuf:"bytes,3,rep,name=outputs" json:"outputs,omitempty"`
	Evidences []*Tx_Evidence `protobuf:"bytes,4,rep,name=evidences" json:"evidences,omitempty"`
	LockTime  uint64         `protobuf:"varint,5,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
}

func (m *Tx) Reset()                    { *m = Tx{} }
func (m *Tx) String() string            { return proto.CompactTextString(m) }
func (*Tx) ProtoMessage()               {}
func (*Tx) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

func (m *Tx) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Tx) GetInputs() []*Tx_TxIn {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *Tx) GetOutputs() []*Tx_TxOut {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *Tx) GetEvidences() []*Tx_Evidence {
	if m != nil {
		return m.Evidences
	}
	return nil
}

func (m *Tx) GetLockTime() uint64 {
	if m != nil {
		return m.LockTime
	}
	return 0
}

type Tx_TxIn struct {
	ValueSource  *Tx_TxIn_ValueSource `protobuf:"bytes,1,opt,name=value_source,json=valueSource" json:"value_source,omitempty"`
	RedeemScript []byte               `protobuf:"bytes,2,opt,name=redeem_script,json=redeemScript,proto3" json:"redeem_script,omitempty"`
	UnlockScript []byte               `protobuf:"bytes,3,opt,name=unlock_script,json=unlockScript,proto3" json:"unlock_script,omitempty"`
	Sequence     uint64               `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *Tx_TxIn) Reset()                    { *m = Tx_TxIn{} }
func (m *Tx_TxIn) String() string            { return proto.CompactTextString(m) }
func (*Tx_TxIn) ProtoMessage()               {}
func (*Tx_TxIn) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4, 0} }

func (m *Tx_TxIn) GetValueSource() *Tx_TxIn_ValueSource {
	if m != nil {
		return m.ValueSource
	}
	return nil
}

func (m *Tx_TxIn) GetRedeemScript() []byte {
	if m != nil {
		return m.RedeemScript
	}
	return nil
}

func (m *Tx_TxIn) GetUnlockScript() []byte {
	if m != nil {
		return m.UnlockScript
	}
	return nil
}

func (m *Tx_TxIn) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

type Tx_TxIn_ValueSource struct {
	Txid  *Hash  `protobuf:"bytes,1,opt,name=txid" json:"txid,omitempty"`
	Index uint64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *Tx_TxIn_ValueSource) Reset()                    { *m = Tx_TxIn_ValueSource{} }
func (m *Tx_TxIn_ValueSource) String() string            { return proto.CompactTextString(m) }
func (*Tx_TxIn_ValueSource) ProtoMessage()               {}
func (*Tx_TxIn_ValueSource) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4, 0, 0} }

func (m *Tx_TxIn_ValueSource) GetTxid() *Hash {
	if m != nil {
		return m.Txid
	}
	return nil
}

func (m *Tx_TxIn_ValueSource) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type Tx_TxOut struct {
	Value      uint64   `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	ScriptHash *Hash160 `protobuf:"bytes,2,opt,name=script_hash,json=scriptHash" json:"script_hash,omitempty"`
}

func (m *Tx_TxOut) Reset()                    { *m = Tx_TxOut{} }
func (m *Tx_TxOut) String() string            { return proto.CompactTextString(m) }
func (*Tx_TxOut) ProtoMessage()               {}
func (*Tx_TxOut) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4, 1} }

func (m *Tx_TxOut) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Tx_TxOut) GetScriptHash() *Hash160 {
	if m != nil {
		return m.ScriptHash
	}
	return nil
}

type Tx_Evidence struct {
	Digest      []byte `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	Source      []byte `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	ValidScript []byte `protobuf:"bytes,3,opt,name=valid_script,json=validScript,proto3" json:"valid_script,omitempty"`
}

func (m *Tx_Evidence) Reset()                    { *m = Tx_Evidence{} }
func (m *Tx_Evidence) String() string            { return proto.CompactTextString(m) }
func (*Tx_Evidence) ProtoMessage()               {}
func (*Tx_Evidence) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4, 2} }

func (m *Tx_Evidence) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

func (m *Tx_Evidence) GetSource() []byte {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Tx_Evidence) GetValidScript() []byte {
	if m != nil {
		return m.ValidScript
	}
	return nil
}

func init() {
	proto.RegisterType((*Hash)(nil), "typespb.Hash")
	proto.RegisterType((*Hash160)(nil), "typespb.Hash160")
	proto.RegisterType((*Block)(nil), "typespb.Block")
	proto.RegisterType((*BlockHeader)(nil), "typespb.BlockHeader")
	proto.RegisterType((*Tx)(nil), "typespb.Tx")
	proto.RegisterType((*Tx_TxIn)(nil), "typespb.Tx.TxIn")
	proto.RegisterType((*Tx_TxIn_ValueSource)(nil), "typespb.Tx.TxIn.ValueSource")
	proto.RegisterType((*Tx_TxOut)(nil), "typespb.Tx.TxOut")
	proto.RegisterType((*Tx_Evidence)(nil), "typespb.Tx.Evidence")
}
func (m *Hash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hash) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.S0 != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.S0))
		i += 8
	}
	if m.S1 != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.S1))
		i += 8
	}
	if m.S2 != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.S2))
		i += 8
	}
	if m.S3 != 0 {
		dAtA[i] = 0x21
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.S3))
		i += 8
	}
	return i, nil
}

func (m *Hash160) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hash160) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.S0 != 0 {
		dAtA[i] = 0xd
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.S0))
		i += 4
	}
	if m.S1 != 0 {
		dAtA[i] = 0x15
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.S1))
		i += 4
	}
	if m.S2 != 0 {
		dAtA[i] = 0x1d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.S2))
		i += 4
	}
	if m.S3 != 0 {
		dAtA[i] = 0x25
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.S3))
		i += 4
	}
	if m.S4 != 0 {
		dAtA[i] = 0x2d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.S4))
		i += 4
	}
	return i, nil
}

func (m *Block) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Block) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BlockHeader != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.BlockHeader.Size()))
		n1, err := m.BlockHeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Transactions) > 0 {
		for _, msg := range m.Transactions {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChainId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ChainId.Size()))
		n2, err := m.ChainId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Version))
	}
	if m.Height != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Height))
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Timestamp))
	}
	if m.Previous != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Previous.Size()))
		n3, err := m.Previous.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.TransactionRoot != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.TransactionRoot.Size()))
		n4, err := m.TransactionRoot.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.WitnessRoot != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.WitnessRoot.Size()))
		n5, err := m.WitnessRoot.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *Tx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tx) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Version))
	}
	if len(m.Inputs) > 0 {
		for _, msg := range m.Inputs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Outputs) > 0 {
		for _, msg := range m.Outputs {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Evidences) > 0 {
		for _, msg := range m.Evidences {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LockTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LockTime))
	}
	return i, nil
}

func (m *Tx_TxIn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tx_TxIn) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ValueSource != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ValueSource.Size()))
		n6, err := m.ValueSource.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.RedeemScript) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RedeemScript)))
		i += copy(dAtA[i:], m.RedeemScript)
	}
	if len(m.UnlockScript) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.UnlockScript)))
		i += copy(dAtA[i:], m.UnlockScript)
	}
	if m.Sequence != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Sequence))
	}
	return i, nil
}

func (m *Tx_TxIn_ValueSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tx_TxIn_ValueSource) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Txid != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Txid.Size()))
		n7, err := m.Txid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *Tx_TxOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tx_TxOut) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Value))
	}
	if m.ScriptHash != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.ScriptHash.Size()))
		n8, err := m.ScriptHash.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *Tx_Evidence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tx_Evidence) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Digest) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Digest)))
		i += copy(dAtA[i:], m.Digest)
	}
	if len(m.Source) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Source)))
		i += copy(dAtA[i:], m.Source)
	}
	if len(m.ValidScript) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ValidScript)))
		i += copy(dAtA[i:], m.ValidScript)
	}
	return i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Hash) Size() (n int) {
	var l int
	_ = l
	if m.S0 != 0 {
		n += 9
	}
	if m.S1 != 0 {
		n += 9
	}
	if m.S2 != 0 {
		n += 9
	}
	if m.S3 != 0 {
		n += 9
	}
	return n
}

func (m *Hash160) Size() (n int) {
	var l int
	_ = l
	if m.S0 != 0 {
		n += 5
	}
	if m.S1 != 0 {
		n += 5
	}
	if m.S2 != 0 {
		n += 5
	}
	if m.S3 != 0 {
		n += 5
	}
	if m.S4 != 0 {
		n += 5
	}
	return n
}

func (m *Block) Size() (n int) {
	var l int
	_ = l
	if m.BlockHeader != nil {
		l = m.BlockHeader.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *BlockHeader) Size() (n int) {
	var l int
	_ = l
	if m.ChainId != nil {
		l = m.ChainId.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovTypes(uint64(m.Version))
	}
	if m.Height != 0 {
		n += 1 + sovTypes(uint64(m.Height))
	}
	if m.Timestamp != 0 {
		n += 1 + sovTypes(uint64(m.Timestamp))
	}
	if m.Previous != nil {
		l = m.Previous.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TransactionRoot != nil {
		l = m.TransactionRoot.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.WitnessRoot != nil {
		l = m.WitnessRoot.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Tx) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovTypes(uint64(m.Version))
	}
	if len(m.Inputs) > 0 {
		for _, e := range m.Inputs {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Outputs) > 0 {
		for _, e := range m.Outputs {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Evidences) > 0 {
		for _, e := range m.Evidences {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LockTime != 0 {
		n += 1 + sovTypes(uint64(m.LockTime))
	}
	return n
}

func (m *Tx_TxIn) Size() (n int) {
	var l int
	_ = l
	if m.ValueSource != nil {
		l = m.ValueSource.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.RedeemScript)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.UnlockScript)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovTypes(uint64(m.Sequence))
	}
	return n
}

func (m *Tx_TxIn_ValueSource) Size() (n int) {
	var l int
	_ = l
	if m.Txid != nil {
		l = m.Txid.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovTypes(uint64(m.Index))
	}
	return n
}

func (m *Tx_TxOut) Size() (n int) {
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovTypes(uint64(m.Value))
	}
	if m.ScriptHash != nil {
		l = m.ScriptHash.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Tx_Evidence) Size() (n int) {
	var l int
	_ = l
	l = len(m.Digest)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ValidScript)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Hash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field S0", wireType)
			}
			m.S0 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.S0 = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field S1", wireType)
			}
			m.S1 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.S1 = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field S2", wireType)
			}
			m.S2 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.S2 = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field S3", wireType)
			}
			m.S3 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.S3 = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Hash160) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hash160: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hash160: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field S0", wireType)
			}
			m.S0 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.S0 = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field S1", wireType)
			}
			m.S1 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.S1 = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field S2", wireType)
			}
			m.S2 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.S2 = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field S3", wireType)
			}
			m.S3 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.S3 = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field S4", wireType)
			}
			m.S4 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.S4 = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Block) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Block: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Block: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockHeader == nil {
				m.BlockHeader = &BlockHeader{}
			}
			if err := m.BlockHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &Tx{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainId == nil {
				m.ChainId = &Hash{}
			}
			if err := m.ChainId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Previous", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Previous == nil {
				m.Previous = &Hash{}
			}
			if err := m.Previous.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionRoot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransactionRoot == nil {
				m.TransactionRoot = &Hash{}
			}
			if err := m.TransactionRoot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WitnessRoot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WitnessRoot == nil {
				m.WitnessRoot = &Hash{}
			}
			if err := m.WitnessRoot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inputs = append(m.Inputs, &Tx_TxIn{})
			if err := m.Inputs[len(m.Inputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outputs = append(m.Outputs, &Tx_TxOut{})
			if err := m.Outputs[len(m.Outputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evidences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Evidences = append(m.Evidences, &Tx_Evidence{})
			if err := m.Evidences[len(m.Evidences)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockTime", wireType)
			}
			m.LockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tx_TxIn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxIn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxIn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueSource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValueSource == nil {
				m.ValueSource = &Tx_TxIn_ValueSource{}
			}
			if err := m.ValueSource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedeemScript", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedeemScript = append(m.RedeemScript[:0], dAtA[iNdEx:postIndex]...)
			if m.RedeemScript == nil {
				m.RedeemScript = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockScript", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnlockScript = append(m.UnlockScript[:0], dAtA[iNdEx:postIndex]...)
			if m.UnlockScript == nil {
				m.UnlockScript = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tx_TxIn_ValueSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Txid == nil {
				m.Txid = &Hash{}
			}
			if err := m.Txid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tx_TxOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScriptHash == nil {
				m.ScriptHash = &Hash160{}
			}
			if err := m.ScriptHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tx_Evidence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Evidence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Evidence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Digest = append(m.Digest[:0], dAtA[iNdEx:postIndex]...)
			if m.Digest == nil {
				m.Digest = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = append(m.Source[:0], dAtA[iNdEx:postIndex]...)
			if m.Source == nil {
				m.Source = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidScript", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidScript = append(m.ValidScript[:0], dAtA[iNdEx:postIndex]...)
			if m.ValidScript == nil {
				m.ValidScript = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 629 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x71, 0xe2, 0xc4, 0xe9, 0xd8, 0x85, 0xb2, 0xaa, 0x90, 0x09, 0x55, 0xd4, 0x86, 0x4b,
	0x10, 0x52, 0x9a, 0x3f, 0x15, 0x70, 0x43, 0xaa, 0x44, 0xd5, 0x9e, 0x40, 0xdb, 0x08, 0x89, 0x03,
	0x8a, 0x1c, 0x7b, 0x89, 0x57, 0x34, 0x5e, 0xd7, 0xbb, 0x0e, 0xe9, 0x9b, 0x70, 0xe2, 0x79, 0x38,
	0xf2, 0x08, 0xa8, 0x3c, 0x00, 0x27, 0xee, 0x68, 0xc7, 0x9b, 0xc4, 0x09, 0xe5, 0x96, 0xdf, 0xcc,
	0x37, 0xb3, 0x33, 0xdf, 0x6e, 0x0c, 0xae, 0xba, 0x49, 0x99, 0xec, 0xa6, 0x99, 0x50, 0x82, 0x38,
	0x08, 0xe9, 0xa4, 0xf9, 0x78, 0x2a, 0xc4, 0xf4, 0x8a, 0x1d, 0x63, 0x78, 0x92, 0x7f, 0x3a, 0x0e,
	0x92, 0x9b, 0x42, 0xd3, 0x3e, 0x03, 0xfb, 0x3c, 0x90, 0x31, 0xb9, 0x0f, 0x15, 0xd9, 0xf3, 0xad,
	0x43, 0xab, 0x53, 0xa7, 0x15, 0xd9, 0x43, 0xee, 0xfb, 0x15, 0xc3, 0x7d, 0xe4, 0x81, 0x5f, 0x35,
	0x3c, 0x40, 0x1e, 0xfa, 0xb6, 0xe1, 0x61, 0xfb, 0x03, 0x38, 0xba, 0x4f, 0xff, 0x45, 0xaf, 0xd4,
	0xca, 0xd9, 0x6a, 0xe5, 0x6c, 0xb5, 0x72, 0xb6, 0x5a, 0x69, 0x1e, 0x22, 0x9f, 0xf8, 0x35, 0xc3,
	0x27, 0xed, 0x6b, 0xa8, 0x9d, 0x5e, 0x89, 0xf0, 0x33, 0x79, 0x09, 0xde, 0x44, 0xff, 0x18, 0xc7,
	0x2c, 0x88, 0x58, 0x86, 0x47, 0xb8, 0x83, 0xfd, 0xae, 0x59, 0xb3, 0x8b, 0xaa, 0x73, 0xcc, 0x51,
	0x77, 0xb2, 0x06, 0x72, 0x0c, 0x9e, 0xca, 0x82, 0x44, 0x06, 0xa1, 0xe2, 0x22, 0x91, 0x7e, 0xe5,
	0xb0, 0xda, 0x71, 0x07, 0xee, 0xaa, 0x70, 0xb4, 0xa0, 0x1b, 0x82, 0xf6, 0xb7, 0x0a, 0xb8, 0xa5,
	0x6e, 0xa4, 0x03, 0x8d, 0x30, 0x0e, 0x78, 0x32, 0xe6, 0x91, 0x39, 0x75, 0x77, 0x55, 0xac, 0xd7,
	0xa6, 0x0e, 0xa6, 0x2f, 0x22, 0xe2, 0x83, 0x33, 0x67, 0x99, 0xe4, 0x22, 0xc1, 0x8d, 0x6d, 0xba,
	0x44, 0xf2, 0x08, 0xea, 0x31, 0xe3, 0xd3, 0x58, 0xe1, 0xea, 0x36, 0x35, 0x44, 0x0e, 0x60, 0x47,
	0xf1, 0x19, 0x93, 0x2a, 0x98, 0xa5, 0xe8, 0x82, 0x4d, 0xd7, 0x01, 0xf2, 0x0c, 0x1a, 0x69, 0xc6,
	0xe6, 0x5c, 0xe4, 0x12, 0x2d, 0xf9, 0xe7, 0xe4, 0x55, 0x9a, 0xbc, 0x82, 0xbd, 0xd2, 0x12, 0xe3,
	0x4c, 0x08, 0xe5, 0xd7, 0xef, 0x2a, 0x79, 0x50, 0x92, 0x51, 0x21, 0x14, 0xe9, 0x81, 0xf7, 0x85,
	0xab, 0x84, 0x49, 0x59, 0x54, 0x39, 0x77, 0x55, 0xb9, 0x46, 0xa2, 0x2b, 0xda, 0xbf, 0x6d, 0xa8,
	0x8c, 0x16, 0xe5, 0x6d, 0xad, 0xcd, 0x6d, 0x3b, 0x50, 0xe7, 0x49, 0x9a, 0xab, 0xa5, 0xd9, 0x7b,
	0x25, 0xb3, 0xbb, 0xa3, 0xc5, 0x45, 0x42, 0x4d, 0x9e, 0x3c, 0x07, 0x47, 0xe4, 0x0a, 0xa5, 0x55,
	0x94, 0x3e, 0xdc, 0x94, 0xbe, 0xcd, 0x15, 0x5d, 0x2a, 0xc8, 0x00, 0x76, 0xd8, 0x9c, 0x47, 0x2c,
	0x09, 0x99, 0xf4, 0x6d, 0x94, 0xef, 0x97, 0xe5, 0x6f, 0x4c, 0x92, 0xae, 0x65, 0xe4, 0x09, 0xec,
	0xe0, 0xab, 0xd1, 0xa6, 0xa2, 0x87, 0x36, 0x6d, 0xe8, 0xc0, 0x88, 0xcf, 0x58, 0xf3, 0x8f, 0x05,
	0xb6, 0x1e, 0x87, 0xbc, 0x06, 0x6f, 0x1e, 0x5c, 0xe5, 0x6c, 0x2c, 0x45, 0x9e, 0x85, 0xcc, 0x5c,
	0xf3, 0xc1, 0xf6, 0xd8, 0xdd, 0xf7, 0x5a, 0x74, 0x89, 0x1a, 0xea, 0xce, 0xd7, 0x40, 0x9e, 0xc2,
	0x6e, 0xc6, 0x22, 0xc6, 0x66, 0x63, 0x19, 0x66, 0x3c, 0x55, 0x78, 0xff, 0x1e, 0xf5, 0x8a, 0xe0,
	0x25, 0xc6, 0xb4, 0x28, 0x4f, 0x70, 0x1a, 0x23, 0xaa, 0x16, 0xa2, 0x22, 0x68, 0x44, 0x4d, 0x68,
	0x48, 0x76, 0x9d, 0xeb, 0xe9, 0xcd, 0x83, 0x58, 0x71, 0xf3, 0x0c, 0xdc, 0xd2, 0x04, 0xe4, 0x08,
	0x6c, 0xb5, 0xf8, 0xdf, 0xa3, 0xc4, 0x14, 0xd9, 0x87, 0x1a, 0x4f, 0x22, 0xb6, 0x30, 0xef, 0xb1,
	0x80, 0xe6, 0x3b, 0xa8, 0xa1, 0xb5, 0x3a, 0x8d, 0x5b, 0x98, 0x0b, 0x2c, 0x80, 0xf4, 0xc1, 0x2d,
	0x06, 0x1c, 0xc7, 0x81, 0x8c, 0xb1, 0xb4, 0x7c, 0x87, 0xe6, 0xaf, 0x4e, 0xa1, 0x10, 0x69, 0x6c,
	0x7e, 0x84, 0xc6, 0xd2, 0x7d, 0xfd, 0xd6, 0x23, 0x3e, 0x65, 0x52, 0x61, 0x57, 0x8f, 0x1a, 0xd2,
	0x71, 0x63, 0x6f, 0x61, 0x8e, 0x21, 0x72, 0x84, 0xe6, 0xf3, 0x68, 0xd3, 0x15, 0x17, 0x63, 0x85,
	0x29, 0xa7, 0x7b, 0xdf, 0x6f, 0x5b, 0xd6, 0x8f, 0xdb, 0x96, 0xf5, 0xf3, 0xb6, 0x65, 0x7d, 0xfd,
	0xd5, 0xba, 0x37, 0xa9, 0xe3, 0x17, 0x6c, 0xf8, 0x37, 0x00, 0x00, 0xff, 0xff, 0x17, 0x06, 0xf2,
	0xb2, 0xf4, 0x04, 0x00, 0x00,
}
